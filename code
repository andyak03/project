#неинформативные признаки
delete=['customer_id','begin_date','end_date','is_end','gender']
#признаки
features=df.drop(delete,axis=1)
target = df['is_end']
#разобьем данные на трейн и тест 75:25
features_train, features_test, target_train, target_test = \
train_test_split(features,target,test_size=0.25,random_state=130223,stratify = target)
#масштабирование
numeric = ['monthly_charges','total_charges','month_count']

scaler = StandardScaler()
scaler.fit(features_train[numeric])

features_train[numeric] = scaler.transform(features_train[numeric])
features_test[numeric] = scaler.transform(features_test[numeric])

#категориальные признаки
category = df.columns.drop(delete+numeric)
category
encoder = OrdinalEncoder(handle_unknown = 'игнорировать')
target_train=target_train.copy()
target_test=target_test.copy()
features_train=features_train.copy()
features_test=features_test.copy()
encoder.fit(features_train[category])
features_train[category] = encoder.transform(features_train[category])
features_test[category] = encoder.transform(features_test[category])
#обучение случайного леса
model = RandomForestClassifier(class_weight='balanced',random_state = state)

n_estimators = [int(x) for x in np.linspace(start = 100, stop = 1250, num = 250)]
max_features = ['log2', 'sqrt']
max_depth = [int(x) for x in np.linspace(start = 1, stop = 45, num = 45)]
min_samples_split = [int(x) for x in np.linspace(start = 2, stop = 100, num = 60)]
min_samples_leaf = [int(x) for x in np.linspace(start = 10, stop = 100, num = 20)]
bootstrap = [True, False]
param_dist = {'n_estimators': n_estimators,
               'max_features': max_features,
               'max_depth': max_depth,
               'min_samples_split': min_samples_split,
               'min_samples_leaf': min_samples_leaf,
               'bootstrap': bootstrap}
rs = RandomizedSearchCV(model, 
                        param_dist, 
                        n_iter = 100, 
                        cv = 3, 
                        verbose = 1, 
                        n_jobs=-1,
                        scoring = ['roc_auc','accuracy'],refit = 'roc_auc',
                        random_state=state)
rs.fit(features_train,target_train)
rs.best_params_
#финальный тест
predictions = rs.predict_proba(features_test)[:, 1]
print(roc_auc_score(target_test,predictions))
